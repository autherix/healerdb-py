#!/usr/bin/env /ptv/healer/healerdb-py/.venv/bin/python3
# -*- coding: utf-8 -*-
import os, sys, inspect
import mod_dbquery as dbquery
from rich.console import Console
from rich.markdown import Markdown
from rich.theme import Theme
from rich.emoji import Emoji
from absl import app
from absl import flags
from absl.testing import absltest
# import fancyflags as ff
import mod_utils as myutils
from mod_utils import *
import mod_flags as flagger

# Clear the terminal screen
clear()

# Set up rich
console = Console()

# Logo string
logo = """# HealerDB
## A CLI Tool to manage the database of Healer
### For Help, just run the command with the -h flag: `healerdb -h`
##### Made with :brain:  and :muscle:  by [Autherix](https://github.com/autherix)
###### By :handshake:  with: [Barbod](https://github.com/dark190)
"""
# print the logo
mdview(logo)
seperator()

# Flags
allFlags = flagger.ArgParser(sys.argv)

# Define config 
config, err = myutils.loadYamlConfig()
if err != None:
    print(parseError(err))
rprint("Config loaded successfully")

dbconfig = config["database"]
db_base_url = dbconfig["url"]["base_url"]
db_username = dbconfig["url"]["creds"]["username"]
db_password = dbconfig["url"]["creds"]["password"]
db_host = dbconfig["url"]["host"]
db_port = str(dbconfig["url"]["port"])
connstr = db_base_url + db_username + ":" + db_password + "@" + db_host + ":" + db_port + "/"
rprint("Connecting to mongodb server on: \n" + db_host + ":" + db_port)
seperator()

# Create a client and ping the database
client, err = dbquery.CreateClient(connstr)
if err != None:
    print(parseError(err))

pingResult, err = dbquery.pingDB(client)
if err != None:
    print(parseError(err))
rprint("Ping result: " + str(pingResult))
seperator()

# Purge the database
purgeResult, err = dbquery.PurgeDatabases(client)
if err != None:
    print(parseError(err))
rprint("Purge result: " + str(purgeResult))

# Create a database called enum
db, err = dbquery.CreateDatabase(client, "enum")
if err != None:
    print(parseError(err))
rprint("Database created successfully")
seperator()

# Create a collection called target1
collection, err = dbquery.CreateCollection(client, "enum", "target1")
if err != None:
    print(parseError(err))
rprint("Collection created successfully")
seperator()

# Create a domain object called domain1.com
domain1, err = dbquery.AddDomain(client, "enum", "target1", "domain1.com")
if err != None:
    print(parseError(err))
rprint("Domain created successfully")

# list domains in the collection target1
docs, domainList, err = dbquery.ListDomains(client, "enum", "target1")
if err != None:
    print(parseError(err))
rprint("Domains in collection target1: " + str(domainList))

# List the subdomains of domain1.com in the collection target1
docs, subdomainList, err = dbquery.ListSubdomains(client, "enum", "target1", "domain1.com")
if err != None:
    print(parseError(err))
rprint("Subdomains of domain1.com in collection target1: " + str(subdomainList))

# Add a new subdomain to domain1.com in the collection target1
subdomain1, doc_id,  err = dbquery.AddSubdomain(client, "enum", "target1", "domain1.com", "subdomain1")
if err != None:
    print(parseError(err))
rprint("Subdomain created successfully: " + stylize(str(subdomain1), "red"))

# List the subdomains of domain1.com in the collection target1
docs, subdomainList, err = dbquery.ListSubdomains(client, "enum", "target1", "domain1.com")
if err != None:
    print(parseError(err))
rprint("Subdomains of domain1.com in collection target1: " + str(subdomainList))

# Add a new subdomain to domain1.com in the collection target1
subdomain2, doc_id, err = dbquery.AddSubdomain(client, "enum", "target1", "domain1.com", "subdomain2")
if err != None:
    print(parseError(err))
rprint("Subdomain created successfully: " + stylize(str(subdomain2), "red"))

# List the subdomains of domain1.com in the collection target1
docs, subdomainList, err = dbquery.ListSubdomains(client, "enum", "target1", "domain1.com")
if err != None:
    print(parseError(err))
rprint("Subdomains of domain1.com in collection target1: " + str(subdomainList))

# Remove subdomain subdomain1 from domain1.com in the collection target1
doc, doc_id, err = dbquery.RemoveSubdomain(client, "enum", "target1", "domain1.com", "subdomain1")
if err != None:
    print(parseError(err))
rprint("Subdomain removed successfully: " + stylize(str(doc['subdomain']), "red"))

# List nested subdomains of subdomain2 in domain1.com in the collection target1
docs, subdomainList, err = dbquery.ListNestedSubdomains(client, "enum", "target1", "domain1.com", "subdomain2")
if err != None:
    print(parseError(err))
rprint("Nested subdomains of subdomain2 in domain1.com in collection target1: " + str(subdomainList))

# Add a new nested subdomain to subdomain2 in domain1.com in the collection target1
subdomain3, doc_id, err = dbquery.AddNestedSubdomain(client, "enum", "target1", "domain1.com", "subdomain2", "subdomain3")
if err != None:
    print(parseError(err))
rprint("Nested subdomain created successfully: " + stylize(str(subdomain3), "red"))

# List nested subdomains of subdomain2 in domain1.com in the collection target1
docs, subdomainList, err = dbquery.ListNestedSubdomains(client, "enum", "target1", "domain1.com", "subdomain2")
if err != None:
    print(parseError(err))
rprint("Nested subdomains of subdomain2 in domain1.com in collection target1: " + str(subdomainList))
seperator()

# Run ListPart function 
docs, err = dbquery.GetInfo(client, "enum", "target1", '{"domain": "domain1.com"}', "subdomains", '{"subdomain": "subdomain2"}', 'subdomain')
if err != None:
    print(parseError(err))
rprint("ListPart result: " + str(docs))
# if docs is a list, try to convert it to a dictionary
if isinstance(docs, list):
    docs = docs[0]
rprint("ListPart result: " + str(docs))
seperator()

# Exit the client
exitResult, err = dbquery.ExitClient(client)
if err != None:
    print(parseError(err))
rprint("Client exit result: " + str(exitResult))
seperator()