#!/usr/bin/env python3
import os, sys
def LoadVenv():
    bin_dir = os.path.dirname(os.path.abspath(__file__))
    venv_dir = os.path.join(os.path.dirname(bin_dir), '.venv')
    venv_parent_dir = os.path.dirname(venv_dir)

    # Check if the virtual environment exists
    if not os.path.exists(venv_dir):
        print("Virtual environment not found. Trying to create one...")
        # Run a command to create the virtual environment in the parent path
        res = os.system(f'python3 -m venv {venv_dir}')
        if res != 0:
            print('Failed to create virtual environment.')
            exit(1)
        else:
            print('Virtual environment created.')
            # If there is a requirements.txt in the parent path, install the dependencies
        requirements_txt = os.path.join(venv_parent_dir, 'requirements.txt')
        if os.path.exists(requirements_txt):
            source_cmd = f'source {os.path.join(venv_dir, "bin", "activate")} > /dev/null 2>&1'
            pyinstall_cmd = f'python3 -m pip install -r {requirements_txt} > /dev/null 2>&1'
            res = os.system(f'bash -c "{source_cmd} && {pyinstall_cmd} && deactivate > /dev/null 2>&1"')
            # res = os.system(f'{os.path.join(venv_dir, "bin", "python3")} 
            if res != 0:
                print('Failed to install dependencies. requirements.txt may be corrupted or not accessible.')
                exit(1)
    # else:
    #     print('requirements.txt not found or not accessible. Going forward...')
        # exit(1)
    
    # Try to activate the virtual environment
    os_join_path = os.path.join(venv_dir, 'bin', 'python3')
    # re-run the program using the virtual environment's Python interpreter
    if not sys.executable.startswith(os_join_path):
        res = os.execv(os_join_path, [os_join_path] + sys.argv)
LoadVenv()

import os
# get current running script path
script_path = os.path.dirname(os.path.realpath(__file__))
# get parent path
parent_dir = os.path.dirname(script_path)


# -*- coding: utf-8 -*-
import os, sys, inspect, time, click, typer

# Imports for typer
import cmd_init
import db_database
import db_collection
import db_target
import db_document
import db_domain
import db_subdomain
import db_url
import db_directory
import db_file
import db_parameter
import db_targetinfo_h1
import db_targetinfo_bc

# Create the typer app, and set to show the help message if no command is passed
app = typer.Typer(help="HealerDB is a CLI tool to manage the database of Healer", no_args_is_help=True)

app.add_typer(cmd_init.app, name="init", help="Initialize the database")

app.add_typer(db_database.app, name="database", help="Manage the databases", no_args_is_help=True)
app.add_typer(db_collection.app, name="collection", help="Manage the collections", no_args_is_help=True)
app.add_typer(db_target.app, name="target", help="Manage the targets", no_args_is_help=True)
app.add_typer(db_document.app, name="document", help="Manage the documents", no_args_is_help=True)

app.add_typer(db_domain.app, name="domain", help="Manage the domains", no_args_is_help=True)
app.add_typer(db_subdomain.app, name="subdomain", help="Manage the subdomains", no_args_is_help=True)
app.add_typer(db_url.app, name="url", help="Manage the urls", no_args_is_help=True)
app.add_typer(db_parameter.app, name="parameter_url", help="Manage the parameters", no_args_is_help=True)
app.add_typer(db_directory.app, name="directory", help="Manage the directories", no_args_is_help=True)
app.add_typer(db_file.app, name="file", help="Manage the files", no_args_is_help=True)
app.add_typer(db_targetinfo_h1.app, name="h1_targetinfo", help="Manage the targets information in hackerone platform", no_args_is_help=True)
app.add_typer(db_targetinfo_bc.app, name="bc_targetinfo", help="Manage the targets information in bugcrowd platform", no_args_is_help=True)

if __name__ == '__main__':
    app()