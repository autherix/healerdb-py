import os, inspect
from rich import print
from rich.console import Console
from rich.markdown import Markdown
from rich.theme import Theme
from rich.emoji import Emoji

sepchr = "â–‚"

# Configure rich
console = Console()

# Function to print a seperator
def seperator(size=80, char="-"):
    print(char * size)

# Function to clear the terminal screen
def clear():
    os.system('cls' if os.name == 'nt' else 'clear')

# Function logo to print the logo 
def mdview(text):
    pre_md = Emoji.replace(text)
    md = Markdown(pre_md)
    console.print(md)

# function ErrGen to generate a complete error message to be printed with the rich library and more helpful data
def ierr(err, inspectFrame):
    # fullstack = inspect.stack()
    # caller = "Caller:", str(fullstack[1][1]) + ":" + str(fullstack[1][2]) + " > " + str(fullstack[1].frame.f_code.co_name)
    # diagMsg = "[bright_black]" + extractFileName(str(inspect.stack()[1].frame.f_code.co_filename)) + ":" + str(inspect.stack()[1].frame.f_code.co_firstlineno) + "[/bright_black] > " + str(inspect.stack()[1].frame.f_code.co_name)

    # Get all error info from the error object
    errType = type(err).__name__
    errArgs = err.args
    errTraceback = err.__traceback__

    # Get the error message from the error object
    errMessage = str(err)

    # Get the error line number from the error object
    errLineNumber = errTraceback.tb_lineno

    # Get the error file name from the error object
    errFileName = errTraceback.tb_frame.f_code.co_filename

    # Get the error function name from the error object
    errFunctionName = errTraceback.tb_frame.f_code.co_name

    # Get the error line code from the error object
    errLineCode = errTraceback.tb_frame.f_code.co_code

    newErrorMsg = "[red][b]ERROR[/b][/red] > " + errMessage + "  [purple]diag > [/purple][white]" + extractFileName(str(errFileName)) + ":" + str(errLineNumber) + " > " + str(errFunctionName) + "[/white]   [yellow]Traceback:  File:[/yellow] > " + str(errFileName) + ":" + str(errLineNumber) + "  [yellow]Function:[/yellow] > " + str(errFunctionName)

    return newErrorMsg

# function rprint to print a message with rich library, with a starter template for telling which file and function is printing the message
def rprint(msg):
    # # if msg is an array, convert it to a string with delimiter " "
    # if type(msg) == list:
    #     msg = " ".join(msg)
    # # if we have args, convert them to a string with delimiter " "
    # if args:
    #     # iterate over args and convert them to string and append them to the end of msg
    #     for arg in args:
    #         msg = msg + " " + str(arg)
    seperator(80, sepchr)
    # Print the message
    diagMsg = "[bright_black]" + extractFileName(str(inspect.stack()[1].frame.f_code.co_filename)) + ":" + str(inspect.stack()[1].frame.f_code.co_firstlineno) + "[/bright_black] > " + str(inspect.stack()[1].frame.f_code.co_name)
    print("[blue][b]LOG[/b][/blue] > " + str(msg) + "\n\n" + "[purple]diag[/purple] > " + diagMsg)
    return

# function extractFileName to extract the filename from a path
def extractFileName(path):
    # split the path by the "/" character
    path = path.split("/")
    # return the last element of the list
    return path[-1]